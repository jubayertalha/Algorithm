#include<iostream>#include<stack>using namespace std;#define MAX 100#define visited 1int n;int adj[MAX][MAX];int state[MAX];void create_graph();void DF_Traversal();void DFS(int v);int main(){	create_graph();	DF_Traversal();	return 0;}void DF_Traversal(){	int v;	for(v=0; v<n; v++) state[v] = visited-1;	cout<<"Enter Start Vertex for DFS: ";	cin>>v;	DFS(v);}void DFS(int v){	stack<int> stack;	stack.push(v);	while(!stack.empty()){		v = stack.top();		stack.pop();		if(state[v]!=visited){			cout<<v<<" ";			state[v] = visited;		}		//cout<<endl;		for(int i=0; i<n; i++){			//cout<<i<<" ++"<<adj[v][i]<<" ++"<<state[i]<<endl;			if(adj[v][i]==1 && state[i]!=visited){				stack.push(i);			}		}		//cout<<endl;	}}void create_graph(){	int count,max_edge,origin,destin;	cout<<"Enter Number of Vertex: ";	cin>>n;	max_edge = n*(n-1);	for(count=1; count<=max_edge; count++){		cout<<"Enter Edge "<<count<<"(-1 -1 to Quit): ";		cin>>origin>>destin;		if((origin == -1) && (destin == -1)) break;		else if(origin>=n || destin>=n || origin<0 || destin<0){			cout<<"Invalid Edge!"<<endl;			count--;		}else{			adj[origin][destin] = 1;		}	}}