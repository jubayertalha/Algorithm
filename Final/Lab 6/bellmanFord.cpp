#include <iostream>using namespace std;struct Edge{	int src, dest, weight;};struct Graph{	int V, E;	struct Edge* edge;};struct Graph* createGraph(int V, int E){	struct Graph* graph = new Graph;	graph->V = V;	graph->E = E;	graph->edge = new Edge[E];	return graph;}void printResult(int dist[], int n, int src){	cout<<"\n\nVertex Distances from Source "<<src<<":"<<endl;	for(int i = 0; i < n; ++i){		cout<<"\n\t\t"<<src<<"  to  "<<i<<"  =  "<<dist[i]<<endl;	}	cout<<endl;}void BellmanFord(struct Graph* graph, int src){	int V = graph->V;	int E = graph->E;	int dist[V];	for(int i = 0; i < V; i++){			dist[i] = INT_MAX;	}	dist[src] = 0;	for(int i = 1; i <= V - 1; i++){		for(int j = 0; j < E; j++){			int u = graph->edge[j].src;			int v = graph->edge[j].dest;			int weight = graph->edge[j].weight;			if(dist[u] != INT_MAX && dist[u] + weight < dist[v]){					dist[v] = dist[u] + weight;			}		}	}	for(int i = 0; i < E; i++){		int u = graph->edge[i].src;		int v = graph->edge[i].dest;		int weight = graph->edge[i].weight;		if(dist[u] != INT_MAX && dist[u] + weight < dist[v]){			cout<<"\n\nGraph contains negative weight cycle"<<endl;			return;		}	}	printResult(dist, V, src);	return;}int main(){	int V;	int E;	cout<<"Enter the number of Vertexes: ";	cin>>V;	cout<<"Enter the number of Edges: ";	cin>>E;	struct Graph* graph = createGraph(V, E);	cout<<"\nEnter the Edges:\n"<<endl;	for(int i=0; i<E; i++){		int src;		int dest;		int weight;		cout<<"\tEnter "<<i<<"th Edge's Source Vertex: ";		cin>>src;		cout<<"\tEnter "<<i<<"th Edge's Destination Vertex: ";		cin>>dest;		cout<<"\tEnter "<<i<<"th Edge's Total Weight: ";		cin>>weight;		graph->edge[i].src = src;		graph->edge[i].dest = dest;		graph->edge[i].weight = weight;		cout<<endl;	}	int src;	cout<<"Enter the Source Vertex: ";	cin>>src;	BellmanFord(graph,src);	return 0;}