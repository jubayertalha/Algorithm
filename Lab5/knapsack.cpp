#include<iostream>#include<iomanip>using namespace std;struct Item{	char id[5];	int weight;	int value;	float density;};void fractionalKnapsack(Item items[], int n, int w){	int i, wt;	float value;	float totalWeight = 0, totalBenefit = 0;	cout<<"Selected Items and Values after Calculation:\n\n\tItem\t\tWeight\t\tValue\t\tTotal Weight\t\tBenefit"<<endl;	for(i = 0; i < n; i++){		if(items[i].weight + totalWeight <= w){			totalWeight += items[i].weight;			totalBenefit += items[i].value;			cout<<"\t"<<items[i].id<<"\t\t"<<items[i].weight<<"\t\t"<<fixed<<setprecision(2)<<items[i].value<<"\t\t"<<totalWeight<<"\t\t\t"<<fixed<<setprecision(2)<<totalBenefit<<endl;		}else{			wt = (w - totalWeight);			value = wt * (float(items[i].value) / items[i].weight);			totalWeight += wt;			totalBenefit += value;			cout<<"\t"<<items[i].id<<"\t\t"<<wt<<"\t\t"<<fixed<<setprecision(2)<<value<<"\t\t"<<totalWeight<<"\t\t\t"<<fixed<<setprecision(2)<<totalBenefit<<endl;			break;		}	} cout<<endl;	cout<<"Total Weight: "<<totalWeight<<endl;	cout<<"Total Benefit: "<<fixed<<setprecision(2)<<totalBenefit<<endl;}int main(){	int i, j;	Item items[6] = {		{"i1", 6, 6, 0},		{"i2", 10, 2, 0},		{"i3", 3, 1, 0},		{"i4", 5, 8, 0},		{"i5", 1, 3, 0},		{"i6", 3, 5, 0}	};	Item temp;	int n = 6;	int w = 16;	cout<<"Items:\n\n\tItem\tWeight\tValue"<<endl;	for(i = 0; i < n; i++){		items[i].density = float(items[i].value) / items[i].weight;		cout<<"\t"<<items[i].id<<"\t"<<items[i].weight<<"\t"<<items[i].value<<endl;	} cout<<endl;	cout<<"Items with Density:\n\n\tItem\tWeight\tValue\tDensity"<<endl;	for(i = 0; i < n; i++) cout<<"\t"<<items[i].id<<"\t"<<items[i].weight<<"\t"<<items[i].value<<"\t"<<fixed<<setprecision(2)<<items[i].density<<endl;	cout<<endl;	for(i = 1; i < n; i++){		for(j = 0; j < n - i; j++){			if(items[j+1].density > items[j].density){				temp = items[j+1];				items[j+1] = items[j];				items[j] = temp;			}		}	}	cout<<"Items as per Density in Descending Order:\n\n\tItem\tWeight\tValue\tDensity"<<endl;	for(i = 0; i < n; i++) cout<<"\t"<<items[i].id<<"\t"<<items[i].weight<<"\t"<<items[i].value<<"\t"<<fixed<<setprecision(2)<<items[i].density<<endl;	cout<<endl;	fractionalKnapsack(items, n, w);	return 0;}